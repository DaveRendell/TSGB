const CHECKSUM_TABLE: number[] = [
    0x00, 0x88, 0x16, 0x36, 0xD1, 0xDB, 0xF2, 0x3C, 0x8C, 0x92, 0x3D, 0x5C, 0x58, 0xC9, 0x3E, 0x70,
    0x1D, 0x59, 0x69, 0x19, 0x35, 0xA8, 0x14, 0xAA, 0x75, 0x95, 0x99, 0x34, 0x6F, 0x15, 0xFF, 0x97,
    0x4B, 0x90, 0x17, 0x10, 0x39, 0xF7, 0xF6, 0xA2, 0x49, 0x4E, 0x43, 0x68, 0xE0, 0x8B, 0xF0, 0xCE,
    0x0C, 0x29, 0xE8, 0xB7, 0x86, 0x9A, 0x52, 0x01, 0x9D, 0x71, 0x9C, 0xBD, 0x5D, 0x6D, 0x67, 0x3F,
    0x6B,
    // Ambiguous ones:
    0xB3, 0x46, 0x28, 0xA5, 0xC6, 0xD3, 0x27, 0x61, 0x18, 0x66, 0x6A, 0xBF, 0x0D, 0xF4
]

const DISCRIMINATOR_ROWS: string[] = [
    "BEFAARBEKEK R-",
    "URAR INAILICE ",
    "R",
]

const PALETTE_INFO: number[] = [
    0x7C, 0x08, 0x12, 0xA3, 0xA2, 0x07, 0x87, 0x4B, 0x20, 0x12, 0x65, 0xA8,
    0x16, 0xA9, 0x86, 0xB1, 0x68, 0xA0, 0x87, 0x66, 0x12, 0xA1, 0x30, 0x3C,
    0x12, 0x85, 0x12, 0x64, 0x1B, 0x07, 0x06, 0x6F, 0x6E, 0x6E, 0xAE, 0xAF,
    0x6F, 0xB2, 0xAF, 0xB2, 0xA8, 0xAB, 0x6F, 0xAF, 0x86, 0xAE, 0xA2, 0xA2,
    0x12, 0xAF, 0x13, 0x12, 0xA1, 0x6E, 0xAF, 0xAF, 0xAD, 0x06, 0x4C, 0x6E,
    0xAF, 0xAF, 0x12, 0x7C, 0xAC, 0xA8, 0x6A, 0x6E, 0x13, 0xA0, 0x2D, 0xA8,
    0x2B, 0xAC, 0x64, 0xAC, 0x6D, 0x87, 0xBC, 0x60, 0xB4, 0x13, 0x72, 0x7C,
    0xB5, 0xAE, 0xAE, 0x7C, 0x7C, 0x65, 0xA2, 0x6C, 0x64, 0x85
]

const PALETTE_SETS: number[][][] = [
    [
        [ 0x7FFF, 0x01DF, 0x0112, 0x0000 ],
        [ 0x7FFF, 0x7EEB, 0x001F, 0x7C00 ],
        [ 0x7FFF, 0x42B5, 0x3DC8, 0x0000 ],
    ],
    [
        [ 0x231F, 0x035F, 0x00F2, 0x0009 ],
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x4FFF, 0x7ED2, 0x3A4C, 0x1CE0 ],
    ],
    [
        [ 0x7FFF, 0x7FFF, 0x7E8C, 0x7C00 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x03ED, 0x7FFF, 0x255F, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x7FFF, 0x7E8C, 0x7C00 ],
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x036A, 0x021F, 0x03FF, 0x7FFF ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x03EF, 0x01D6, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x7EEB, 0x001F, 0x7C00 ],
        [ 0x7FFF, 0x03EA, 0x011F, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x7EEB, 0x001F, 0x7C00 ],
        [ 0x7FFF, 0x027F, 0x001F, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x7EEB, 0x001F, 0x7C00 ],
        [ 0x7FFF, 0x03FF, 0x001F, 0x0000 ],
    ],
    [
        [ 0x299F, 0x001A, 0x000C, 0x0000 ],
        [ 0x7C00, 0x7FFF, 0x3FFF, 0x7E00 ],
        [ 0x7E74, 0x03FF, 0x0180, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x01DF, 0x0112, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x67FF, 0x77AC, 0x1A13, 0x2D6B ],
    ],
    [
        [ 0x0000, 0x7FFF, 0x421F, 0x1CF2 ],
        [ 0x0000, 0x7FFF, 0x421F, 0x1CF2 ],
        [ 0x7ED6, 0x4BFF, 0x2175, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x3FFF, 0x7E00, 0x001F ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
    ],
    [
        [ 0x231F, 0x035F, 0x00F2, 0x0009 ],
        [ 0x7FFF, 0x7EEB, 0x001F, 0x7C00 ],
        [ 0x7FFF, 0x6E31, 0x454A, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x7FFF, 0x6E31, 0x454A, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x03E0, 0x0206, 0x0120 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x0000, 0x4200, 0x037F, 0x7FFF ],
    ],
    [
        [ 0x03FF, 0x001F, 0x000C, 0x0000 ],
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x42B5, 0x3DC8, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x5294, 0x294A, 0x0000 ],
        [ 0x7FFF, 0x5294, 0x294A, 0x0000 ],
        [ 0x7FFF, 0x5294, 0x294A, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x53FF, 0x4A5F, 0x7E52, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x639F, 0x4279, 0x15B0, 0x04CB ],
    ],
    [
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x1BEF, 0x0200, 0x0000 ],
        [ 0x7FFF, 0x03FF, 0x012F, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x033F, 0x0193, 0x0000 ],
        [ 0x7FFF, 0x033F, 0x0193, 0x0000 ],
        [ 0x7FFF, 0x033F, 0x0193, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x421F, 0x1CF2, 0x0000 ],
        [ 0x7FFF, 0x7E8C, 0x7C00, 0x0000 ],
        [ 0x7FFF, 0x1BEF, 0x6180, 0x0000 ],
    ],
    [
        [ 0x2120, 0x8022, 0x8281, 0x1110 ],
        [ 0xFF7F, 0xDF7F, 0x1201, 0x0001 ],
        [ 0xFF00, 0xFF7F, 0x1F03, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
    ],
    [
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
        [ 0x7FFF, 0x32BF, 0x00D0, 0x0000 ],
    ]
];

export function getPaletteForCartridge(
    title: string,
    oldLicenseeCode: number,
    newLicenceeCode: string,
): number[][] {
    const index = indexFromTitleAndLicenseeCode(title, oldLicenseeCode, newLicenceeCode)

    const paletteInfo = PALETTE_INFO[index]
    const paletteSetId = paletteInfo & 0x1F
    const flags = paletteInfo >> 5

    return getPallete(paletteSetId, flags)
}

function getPallete(paletteSetId: number, flags: number): number[][] {
  const paletteSet = PALETTE_SETS[paletteSetId]

    const obp0 = paletteSet[
        (flags & 0x1) ? 0 : 2
    ]
    const obp1 = paletteSet[
        (flags & 0x4)
            ? (flags & 0x2)
                ? 0
                : 1
            : 2
    ]
    const bg = paletteSet[2]

    return [bg, obp0, obp1]
}

function indexFromTitleAndLicenseeCode(
    title: string,
    oldLicenseeCode: number,
    newLicenceeCode: string,
): number {
    if (
        oldLicenseeCode !== 0x01
        && (
            oldLicenseeCode !== 0x33
            || newLicenceeCode !== "01"
        )
    ) {
        return 0x00    
    }

    const checkSum = calculateCheckSum(title)
    const checkSumLookupIndex = CHECKSUM_TABLE.indexOf(checkSum)

    if (checkSumLookupIndex === -1) { return 0x00 }

    if (checkSumLookupIndex <= 64) { return checkSumLookupIndex }

    const fourthLetter = title[3]
    const discriminatorRowIndex = DISCRIMINATOR_ROWS
        .findIndex(row => row[checkSumLookupIndex - 65] === fourthLetter)

    if (discriminatorRowIndex === -1) { return 0x00 }

    return checkSumLookupIndex + 14 * discriminatorRowIndex
}

function calculateCheckSum(title: string): number {
    let sum = 0
    for (let i = 0; i < 16; i++) {
        sum = (sum + title.charCodeAt(i)) & 0xFF
    }
    return sum
}